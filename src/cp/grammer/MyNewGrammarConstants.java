/* Generated By:JavaCC: Do not edit this line. MyNewGrammarConstants.java */
package cp.grammer;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int MINUS = 6;
  /** RegularExpression Id. */
  int MULTIPLY = 7;
  /** RegularExpression Id. */
  int DIVIDE = 8;
  /** RegularExpression Id. */
  int POW = 9;
  /** RegularExpression Id. */
  int FALSE = 10;
  /** RegularExpression Id. */
  int TRUE = 11;
  /** RegularExpression Id. */
  int EEQUALS = 12;
  /** RegularExpression Id. */
  int EQUALS = 13;
  /** RegularExpression Id. */
  int COLON = 14;
  /** RegularExpression Id. */
  int BIGGER = 15;
  /** RegularExpression Id. */
  int SMALLER = 16;
  /** RegularExpression Id. */
  int MORE_EQUAL = 17;
  /** RegularExpression Id. */
  int LESS_EQUAL = 18;
  /** RegularExpression Id. */
  int NOT = 19;
  /** RegularExpression Id. */
  int COMMA = 20;
  /** RegularExpression Id. */
  int IF = 21;
  /** RegularExpression Id. */
  int ELSE = 22;
  /** RegularExpression Id. */
  int ELIF = 23;
  /** RegularExpression Id. */
  int PRINT = 24;
  /** RegularExpression Id. */
  int CLASS = 25;
  /** RegularExpression Id. */
  int BREAK = 26;
  /** RegularExpression Id. */
  int DEF = 27;
  /** RegularExpression Id. */
  int WHILE = 28;
  /** RegularExpression Id. */
  int LPARENT = 29;
  /** RegularExpression Id. */
  int RPARENT = 30;
  /** RegularExpression Id. */
  int LBRACE = 31;
  /** RegularExpression Id. */
  int RBRACE = 32;
  /** RegularExpression Id. */
  int LARRAY = 33;
  /** RegularExpression Id. */
  int RARRAY = 34;
  /** RegularExpression Id. */
  int DIGIT = 35;
  /** RegularExpression Id. */
  int CONSTANT = 36;
  /** RegularExpression Id. */
  int DOUBLEDIGIT = 37;
  /** RegularExpression Id. */
  int LETTER = 38;
  /** RegularExpression Id. */
  int VARIABLE = 39;
  /** RegularExpression Id. */
  int STRING = 40;
  /** RegularExpression Id. */
  int SPILIT = 41;
  /** RegularExpression Id. */
  int INDEX = 42;
  /** RegularExpression Id. */
  int LIST = 43;
  /** RegularExpression Id. */
  int DICTIONARY = 44;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"**\"",
    "\"False\"",
    "\"True\"",
    "\"==\"",
    "\"=\"",
    "\":\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"!\"",
    "\",\"",
    "\"if\"",
    "\"else\"",
    "\"elif\"",
    "\"print\"",
    "\"class\"",
    "\"break\"",
    "\"def\"",
    "\"while\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "<DIGIT>",
    "<CONSTANT>",
    "<DOUBLEDIGIT>",
    "<LETTER>",
    "<VARIABLE>",
    "<STRING>",
    "<SPILIT>",
    "<INDEX>",
    "<LIST>",
    "<DICTIONARY>",
    "\";\"",
  };

}
